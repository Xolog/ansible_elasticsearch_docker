services:
  setup:
    image: "{{ es_image_repo }}{{ '-wolfi' if es_use_wolfi else '' }}:{{ es_version }}"
    container_name: es-setup
    command:
      - bash
      - -lc
      - |
        set -euo pipefail

        if [ ! -f config/certs/ca/ca.crt ]; then
          echo "==> Generating CA"
          elasticsearch-certutil ca --silent --pem --out config/certs/ca.zip
          unzip -o config/certs/ca.zip -d config/certs
        fi

        # Write instances.yml without quoting/escaping issues
        cat > config/certs/instances.yml <<'YAML'
        instances:
          - name: es01
            dns:
              - es01
              - localhost
            ip:
              - 127.0.0.1
          - name: es02
            dns:
              - es02
              - localhost
            ip:
              - 127.0.0.1
          - name: es03
            dns:
              - es03
              - localhost
            ip:
              - 127.0.0.1
        YAML

        echo "==> Generating node certs"
        elasticsearch-certutil cert --silent --pem \
          --ca-cert config/certs/ca/ca.crt \
          --ca-key  config/certs/ca/ca.key \
          --in      config/certs/instances.yml \
          --out     config/certs/certs.zip
        unzip -o config/certs/certs.zip -d config/certs

        echo "==> Fixing permissions"
        chown -R root:root config/certs
        find config/certs -type d -exec chmod 750 {} \;
        find config/certs -type f -exec chmod 640 {} \;
    volumes:
      - "{{ es_data_root }}/certs:/usr/share/elasticsearch/config/certs"
    environment:
      ELASTIC_PASSWORD: "{{ es_password }}"
    user: "0"
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
{% for n in es_nodes %}

  {{ n.name }}:
    depends_on:
      setup:
        condition: service_completed_successfully
    image: "{{ es_image_repo }}{{ '-wolfi' if es_use_wolfi else '' }}:{{ es_version }}"
    container_name: "{{ n.name }}"
    environment:
      node.name: "{{ n.name }}"
      cluster.name: "{{ es_cluster_name }}"
      discovery.seed_hosts: "{% for m in es_nodes %}{{ m.name }}{% if not loop.last %},{% endif %}{% endfor %}"
      cluster.initial_master_nodes: "{% for m in es_nodes %}{{ m.name }}{% if not loop.last %},{% endif %}{% endfor %}"

      xpack.security.enabled: "true"

      xpack.security.http.ssl.enabled: "true"
      xpack.security.http.ssl.key: "certs/{{ n.name }}/{{ n.name }}.key"
      xpack.security.http.ssl.certificate: "certs/{{ n.name }}/{{ n.name }}.crt"
      xpack.security.http.ssl.certificate_authorities: "certs/ca/ca.crt"

      xpack.security.transport.ssl.enabled: "true"
      xpack.security.transport.ssl.verification_mode: "certificate"
      xpack.security.transport.ssl.key: "certs/{{ n.name }}/{{ n.name }}.key"
      xpack.security.transport.ssl.certificate: "certs/{{ n.name }}/{{ n.name }}.crt"
      xpack.security.transport.ssl.certificate_authorities: "certs/ca/ca.crt"

      ELASTIC_PASSWORD: "{{ es_password }}"
{% if n.heap is defined %}
      ES_JAVA_OPTS: "-Xms{{ n.heap }} -Xmx{{ n.heap }}"
{% endif %}
      {% if n.roles is defined %}node.roles: "{{ n.roles | join(',') }}"{% endif %}

    ulimits:
      nofile:
        soft: 262144
        hard: 262144
      memlock:
        soft: -1
        hard: -1

    volumes:
      - "{{ es_data_root }}/certs:/usr/share/elasticsearch/config/certs"
      - "{{ es_data_root }}/{{ n.name }}/data:/usr/share/elasticsearch/data"

    networks: [elastic]
    restart: unless-stopped
{% if n.http_port is defined %}
    ports:
      - "{{ n.http_port }}:9200"
{% endif %}
{% endfor %}

networks:
  elastic:
    name: "{{ es_network }}"
    external: true
